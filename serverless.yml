service: coolai-prototype

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:Query
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${self:provider.stage}-sensorData

functions:
  generateMockData:
    handler: index.generateMockData
    events:
      - schedule: rate(5 minutes)
    environment:
      SENSOR_DATA_TABLE: ${self:service}-${self:provider.stage}-sensorData
  processData:
    handler: index.processData
    events:
      - stream:
          type: dynamodb
          arn: 
            Fn::GetAtt: [SensorDataTable, StreamArn]
    environment:
      SENSOR_DATA_TABLE: ${self:service}-${self:provider.stage}-sensorData
  optimizeAC:
    handler: index.optimizeAC
    events:
      - http:
          path: optimize
          method: post
    environment:
      SENSOR_DATA_TABLE: ${self:service}-${self:provider.stage}-sensorData

resources:
  Resources:
    SensorDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-sensorData
        AttributeDefinitions:
          - AttributeName: sensorId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: sensorId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

plugins:
  - serverless-esbuild

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: 
      - aws-sdk
    target: node20
    define:
      require.resolve: undefined
    platform: node
    concurrency: 10
